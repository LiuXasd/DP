import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from rclpy.qos import qos_profile_sensor_data
from sensor_msgs.msg import Image
from geometry_msgs.msg import PoseStamped, Twist
from cv_bridge import CvBridge, CvBridgeError
import cv2
import numpy as np
from tensorflow.keras.models import load_model
from ultralytics import YOLO
from nav2_msgs.action import NavigateToPose
from nav2_msgs.srv import ClearEntireCostmap
from action_msgs.msg import GoalStatus
import time 

class TrafficSignDetector(Node):

    def __init__(self):
        super().__init__('traffic_sign_detector')
        self.subscription = self.create_subscription(
            Image,
            '/camera/image_raw',
            self.image_callback,
            qos_profile_sensor_data)
        self.pose_subscription = self.create_subscription(
            PoseStamped,
            '/amcl_pose',
            self.pose_callback,
            qos_profile_sensor_data)
        self.velocity_publisher = self.create_publisher(Twist, '/cmd_vel', 10)
        self.bridge = CvBridge()
        self.yolo_model = YOLO('yolov8n.pt')
        self.cnn_model = load_model('model_trained.keras')
        self.font = cv2.FONT_HERSHEY_SIMPLEX

        self.nav_action_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')
        while not self.nav_action_client.wait_for_server(timeout_sec=1.0):
            self.get_logger().info('Waiting for NavigateToPose action server...')

        self.clear_costmap_service = self.create_client(ClearEntireCostmap, '/local_costmap/clear_entirely_local_costmap')
        while not self.clear_costmap_service.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('Waiting for ClearEntireCostmap service...')

        self.last_goal_handle = None
        self.current_pose = None
        self.processing_enabled = True
        self.last_detection_time = {'Stop': 0, 'Turn Right': 0, 'Turn Left': 0}
        self.starting_location = {
            'position': {'x': 0.025, 'y': 0.028, 'z': 0.010},
            'orientation': {'x': 0.0, 'y': 0.0, 'z': -0.048, 'w': 0.999}
        }

    def grayscale(self, img):
        return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    def equalize(self, img):
        return cv2.equalizeHist(img)

    def preprocessing(self, img):
        img = self.grayscale(img)
        img = self.equalize(img)
        img = img / 255
        return img

    def getClassName(self, classNo):
        classNames = ['Stop', 'Turn Right', 'Turn Left']
        return classNames[classNo]

    def send_goal(self, x, y, w):
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose.pose.position.x = x
        goal_msg.pose.pose.position.y = y
        goal_msg.pose.pose.orientation.w = w
        
        send_goal_future = self.nav_action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)
        send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().error('Goal rejected')
            return

        self.get_logger().info('Goal accepted')
        self.last_goal_handle = goal_handle
        self.get_result_future = goal_handle.get_result_async()
        self.get_result_future.add_done_callback(self.result_callback)

    def turn_and_move(self, angular_z, linear_x, duration, resume_navigation=True):
        twist = Twist()
        twist.angular.z = angular_z
        twist.linear.x = linear_x
        self.velocity_publisher.publish(twist)
        time.sleep(duration)
        self.stop_robot()
        if resume_navigation:
            self.resume_last_goal()

    def stop_robot(self):
        if self.last_goal_handle:
            cancel_future = self.last_goal_handle.cancel_goal_async()
            rclpy.spin_until_future_complete(self, cancel_future)
            if cancel_future.result().return_code != GoalStatus.STATUS_SUCCEEDED:
                self.get_logger().error("Failed to cancel the goal")
            else:
                self.get_logger().info("Successfully canceled the goal")

        twist = Twist()
        twist.linear.x = 0.0
        twist.linear.y = 0.0
        twist.linear.z = 0.0
        twist.angular.x = 0.0
        twist.angular.y = 0.0
        twist.angular.z = 0.0
        self.velocity_publisher.publish(twist)

    def resume_last_goal(self):
        if self.last_goal_handle:
            self.last_goal_handle = None
            goal_msg = self.last_goal_handle.request.goal
            self.send_goal(goal_msg.pose.pose.position.x, goal_msg.pose.pose.position.y, goal_msg.pose.pose.orientation.w)

    def return_to_start(self):
        start_pos = self.starting_location['position']
        start_orient = self.starting_location['orientation']
        self.send_goal(start_pos['x'], start_pos['y'], start_orient['w'])

    def pose_callback(self, msg):
        self.current_pose = msg.pose

    def image_callback(self, msg):
        if not self.processing_enabled:
            return

        try:
            img_np = np.frombuffer(msg.data, dtype=np.uint8).reshape(msg.height, msg.width, 2)
            imgOriginal = cv2.cvtColor(img_np, cv2.COLOR_YUV2BGR_YUY2)

            if imgOriginal.shape[0] < 32 or imgOriginal.shape[1] < 32:
                self.get_logger().warning("Image resolution too low for processing.")
                return

            results = self.yolo_model(imgOriginal)

            for result in results:
                for detection in result.boxes:
                    xyxy = detection.xyxy[0].cpu().numpy().astype(int)
                    confidence = detection.conf[0].cpu().numpy()

                    if confidence > 0.75:
                        detected_object = imgOriginal[xyxy[1]:xyxy[3], xyxy[0]:xyxy[2]]

                        if detected_object.size != 0:
                            detected_object = cv2.resize(detected_object, (32, 32))
                            detected_object = self.preprocessing(detected_object)
                            detected_object = detected_object.reshape(1, 32, 32, 1)

                            predictions = self.cnn_model.predict(detected_object)
                            classIndex = np.argmax(predictions)
                            probabilityValue = np.amax(predictions)

                            if probabilityValue > 0.75:
                                current_time = time.time()
                                className = self.getClassName(classIndex)
                                label = f"{className}: {round(probabilityValue * 100, 2)}%"
                                cv2.rectangle(imgOriginal, (xyxy[0], xyxy[1]), (xyxy[2], xyxy[3]), (0, 255, 0), 2)
                                cv2.putText(imgOriginal, label, (xyxy[0], xyxy[1] - 10), self.font, 0.75, (0, 255, 0), 2, cv2.LINE_AA)

                                if current_time - self.last_detection_time[className] < 5.0:
                                    self.get_logger().info(f"Ignoring {className} sign detected within 5 seconds.")
                                    continue

                                self.last_detection_time[className] = current_time

                                if className == 'Stop':
                                    self.stop_robot()
                                    self.get_logger().info("Stopping for 3 seconds before returning to the start.")
                                    self.create_timer(3, self.return_to_start)
                                elif className == 'Turn Right':
                                    self.turn_and_move(-1.0, 0.1, 2)  
                                elif className == 'Turn Left':
                                    self.turn_and_move(1.0, 0.1, 2)  

            cv2.imshow("Result", imgOriginal)
            cv2.waitKey(1)
        except CvBridgeError as e:
            self.get_logger().error(f"Error converting image: {e}")
        except Exception as e:
            self.get_logger().error(f"Unexpected error: {e}")

    def feedback_callback(self, feedback):
        self.get_logger().info(f'Received feedback: {feedback}')

    def result_callback(self, future):
        result = future.result()
        self.get_logger().info(f'Received result: {result}')
        self.processing_enabled = True

def main(args=None):
    rclpy.init(args=args)
    traffic_sign_detector = TrafficSignDetector()
    rclpy.spin(traffic_sign_detector)
    traffic_sign_detector.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

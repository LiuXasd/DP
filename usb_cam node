import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image, CameraInfo, CompressedImage
from std_srvs.srv import SetBool
from camera_info_manager import CameraInfoManager
from usb_cam import UsbCam, utils
from rclpy.parameter import Parameter
import threading
import time
import os

BASE_TOPIC_NAME = "image_raw"

class UsbCamNode(Node):

    def __init__(self):
        super().__init__('usb_cam')

        self.declare_parameters(
            namespace='',
            parameters=[
                ('camera_name', 'default_cam'),
                ('camera_info_url', ''),
                ('framerate', 30.0),
                ('frame_id', 'default_cam'),
                ('image_height', 480),
                ('image_width', 640),
                ('io_method', 'mmap'),
                ('pixel_format', 'yuyv'),
                ('av_device_format', 'YUV422P'),
                ('video_device', '/dev/video0'),
                ('brightness', 50),  
                ('contrast', -1),    
                ('saturation', -1),  
                ('sharpness', -1), 
                ('gain', -1), 
                ('auto_white_balance', True),
                ('white_balance', 4000),
                ('autoexposure', True),
                ('exposure', 100),
                ('autofocus', False),
                ('focus', -1) 
            ]
        )

        self.camera = UsbCam()
        self.image_msg = Image()
        self.compressed_img_msg = None
        self.image_publisher = self.create_publisher(
            Image,
            BASE_TOPIC_NAME,
            10
        )
        self.compressed_image_publisher = None
        self.compressed_cam_info_publisher = None
        self.camera_info_msg = CameraInfo()
        self.service_capture = self.create_service(
            SetBool,
            'set_capture',
            self.service_capture_callback
        )

        self.get_params()
        self.init_camera()
        self.add_on_set_parameters_callback(self.parameters_callback)

    def service_capture_callback(self, request, response):
        if request.data:
            self.camera.start_capturing()
            response.message = "Start Capturing"
        else:
            self.camera.stop_capturing()
            response.message = "Stop Capturing"
        return response

    def get_params(self):
        parameters = self.get_parameters([
            'camera_name', 'camera_info_url', 'frame_id', 'framerate', 'image_height', 'image_width',
            'io_method', 'pixel_format', 'av_device_format', 'video_device', 'brightness', 'contrast',
            'saturation', 'sharpness', 'gain', 'auto_white_balance', 'white_balance', 'autoexposure',
            'exposure', 'autofocus', 'focus'
        ])
        self.assign_params(parameters)

    def assign_params(self, parameters):
        self.parameters = {}
        for param in parameters:
            self.parameters[param.name] = param.value

    def resolve_device_path(self, path):
        if os.path.islink(path):
            return "/dev/" + os.readlink(path)
        return path

    def init_camera(self):
        while not self.parameters.get('frame_id'):
            self.get_logger().warn('Required Parameters not set...waiting until they are set')
            self.get_params()
            time.sleep(0.5)

        self.camera_info = CameraInfoManager(
            self, self.parameters['camera_name'], self.parameters['camera_info_url'])
        
        if not self.camera_info.isCalibrated():
            self.camera_info.setCameraName(self.parameters['device_name'])
            self.camera_info_msg.header.frame_id = self.parameters['frame_id']
            self.camera_info_msg.width = self.parameters['image_width']
            self.camera_info_msg.height = self.parameters['image_height']
            self.camera_info.setCameraInfo(self.camera_info_msg)
        
        available_devices = utils.available_devices()
        if self.parameters['device_name'] not in available_devices:
            self.get_logger().error(f"Device specified is not available or is not a valid V4L2 device: `{self.parameters['device_name']}`")
            self.get_logger().info("Available V4L2 devices are:")
            for device, info in available_devices.items():
                self.get_logger().info(f"    {device}")
                self.get_logger().info(f"        {info.card}")
            rclpy.shutdown()
            return
        
        if self.parameters['pixel_format'] == 'mjpeg':
            self.compressed_img_msg = CompressedImage()
            self.compressed_img_msg.header.frame_id = self.parameters['frame_id']
            self.compressed_image_publisher = self.create_publisher(
                CompressedImage, f"{BASE_TOPIC_NAME}/compressed", 10)
            self.compressed_cam_info_publisher = self.create_publisher(
                CameraInfo, 'camera_info', 10)
        
        self.image_msg.header.frame_id = self.parameters['frame_id']
        self.get_logger().info(
            f"Starting '{self.parameters['camera_name']}' ({self.parameters['device_name']}) at "
            f"{self.parameters['image_width']}x{self.parameters['image_height']} via "
            f"{self.parameters['io_method']} ({self.parameters['pixel_format']}) at "
            f"{self.parameters['framerate']} FPS")
        
        io_method = utils.io_method_from_string(self.parameters['io_method'])
        if io_method == utils.IO_METHOD_UNKNOWN:
            self.get_logger().error(f"Unknown IO method '{self.parameters['io_method']}'")
            rclpy.shutdown()
            return
        
        self.camera.configure(self.parameters, io_method)
        self.set_v4l2_params()
        self.camera.start()
        period_ms = 1000.0 / self.parameters['framerate']
        self.timer = self.create_timer(
            period_ms / 1000.0,
            self.update
        )
        self.get_logger().info(f"Timer triggering every {period_ms} ms")

    def set_v4l2_params(self):
        if self.parameters['brightness'] >= 0:
            self.get_logger().info(f"Setting 'brightness' to {self.parameters['brightness']}")
            self.camera.set_v4l_parameter('brightness', self.parameters['brightness'])
        
        if self.parameters['contrast'] >= 0:
            self.get_logger().info(f"Setting 'contrast' to {self.parameters['contrast']}")
            self.camera.set_v4l_parameter('contrast', self.parameters['contrast'])
        
        if self.parameters['saturation'] >= 0:
            self.get_logger().info(f"Setting 'saturation' to {self.parameters['saturation']}")
            self.camera.set_v4l_parameter('saturation', self.parameters['saturation'])
        
        if self.parameters['sharpness'] >= 0:
            self.get_logger().info(f"Setting 'sharpness' to {self.parameters['sharpness']}")
            self.camera.set_v4l_parameter('sharpness', self.parameters['sharpness'])
        
        if self.parameters['gain'] >= 0:
            self.get_logger().info(f"Setting 'gain' to {self.parameters['gain']}")
            self.camera.set_v4l_parameter('gain', self.parameters['gain'])
        
        if self.parameters['auto_white_balance']:
            self.camera.set_v4l_parameter('white_balance_temperature_auto', 1)
            self.get_logger().info(f"Setting 'white_balance_temperature_auto' to 1")
        else:
            self.get_logger().info(f"Setting 'white_balance' to {self.parameters['white_balance']}")
            self.camera.set_v4l_parameter('white_balance_temperature_auto', 0)
            self.camera.set_v4l_parameter('white_balance_temperature', self.parameters['white_balance'])
        
        if not self.parameters['autoexposure']:
            self.get_logger().info(f"Setting 'exposure_auto' to 1")
            self.get_logger().info(f"Setting 'exposure' to {self.parameters['exposure']}")
            self.camera.set_v4l_parameter('exposure_auto', 1)
            self.camera.set_v4l_parameter('exposure_absolute', self.parameters['exposure'])
        else:
            self.get_logger().info(f"Setting 'exposure_auto' to 3")
            self.camera.set_v4l_parameter('exposure_auto', 3)
        
        if self.parameters['autofocus']:
            self.camera.set_auto_focus(1)
            self.get_logger().info(f"Setting 'focus_auto' to 1")
            self.camera.set_v4l_parameter('focus_auto', 1)
        else:
            self.get_logger().info(f"Setting 'focus_auto' to 0")
            self.camera.set_v4l_parameter('focus_auto', 0)
            if self.parameters['focus'] >= 0:
                self.get_logger().info(f"Setting 'focus_absolute' to {self.parameters['focus']}")
                self.camera.set_v4l_parameter('focus_absolute', self.parameters['focus'])

    def take_and_send_image(self):
        if len(self.image_msg.data) != self.camera.get_image_size_in_bytes():
            self.image_msg.width = self.camera.get_image_width()
            self.image_msg.height = self.camera.get_image_height()
            self.image_msg.encoding = self.camera.get_pixel_format().ros()
            self.image_msg.step = self.camera.get_image_step()
            if self.image_msg.step == 0:
                self.image_msg.step = self.camera.get_image_size_in_bytes() // self.image_msg.height
            self.image_msg.data = [0] * self.camera.get_image_size_in_bytes()
        
        self.camera.get_image(memoryview(self.image_msg.data))
        stamp = self.camera.get_image_timestamp()
        self.image_msg.header.stamp.sec = stamp.tv_sec
        self.image_msg.header.stamp.nanosec = stamp.tv_nsec
        self.camera_info_msg = self.camera_info.getCameraInfo()
        self.camera_info_msg.header = self.image_msg.header
        self.image_publisher.publish(self.image_msg, self.camera_info_msg)
        return True

    def take_and_send_image_mjpeg(self):
        if len(self.compressed_img_msg.data) != self.camera.get_image_size_in_bytes():
            self.compressed_img_msg.format = 'jpeg'
            self.compressed_img_msg.data = [0] * self.camera.get_image_size_in_bytes()
        
        self.camera.get_image(memoryview(self.compressed_img_msg.data))
        stamp = self.camera.get_image_timestamp()
        self.compressed_img_msg.header.stamp.sec = stamp.tv_sec
        self.compressed_img_msg.header.stamp.nanosec = stamp.tv_nsec
        self.camera_info_msg = self.camera_info.getCameraInfo()
        self.camera_info_msg.header = self.compressed_img_msg.header
        self.compressed_image_publisher.publish(self.compressed_img_msg)
        self.compressed_cam_info_publisher.publish(self.camera_info_msg)
        return True

    def parameters_callback(self, parameters):
        self.get_logger().debug(f"Setting parameters for {self.parameters['camera_name']}")
        self.timer.cancel()
        self.assign_params(parameters)
        self.set_v4l2_params()
        self.timer.reset()
        return SetParametersResult(successful=True, reason="success")

    def update(self):
        if self.camera.is_capturing():
            is_successful = self.take_and_send_image_mjpeg() if self.parameters['pixel_format'] == 'mjpeg' else self.take_and_send_image()
            if not is_successful:
                self.get_logger().warn_once("USB camera did not respond in time.")

def main(args=None):
    rclpy.init(args=args)
    node = UsbCamNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

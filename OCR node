import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient, GoalResponse, CancelResponse
from action_msgs.msg import GoalStatus
from nav2_msgs.action import NavigateToPose
from geometry_msgs.msg import PoseStamped, Point
from nav_msgs.msg import Odometry
import cv2
import pytesseract
import time

pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

def extract_text_from_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    text = pytesseract.image_to_string(gray)
    return text

class TextExtractorNode(Node):
    def __init__(self):
        super().__init__('text_extractor')
        self.get_logger().info("Initializing camera...")
        self.cap = cv2.VideoCapture(0)

        if not self.cap.isOpened():
            self.get_logger().error("Error: Could not open video device.")
            rclpy.shutdown()
            return

        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self.cap.set(cv2.CAP_PROP_FPS, 30)

        self.get_logger().info("Camera initialized. Starting video capture...")
        self.timer = self.create_timer(0.1, self.capture_frame)

        self.navigation_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')

        self.is_navigating = False
        self.is_at_starting_point = True  
        self.starting_point = PoseStamped()
        self.starting_point.header.frame_id = "map"
        self.starting_point.pose.position.x = 0.025
        self.starting_point.pose.position.y = 0.028
        self.starting_point.pose.position.z = 0.010
        self.starting_point.pose.orientation.x = 0.0
        self.starting_point.pose.orientation.y = 0.0
        self.starting_point.pose.orientation.z = -0.048
        self.starting_point.pose.orientation.w = 0.999

        self.goal_reached = False  
        self.last_position = None
        self.last_movement_time = time.time()
        self.odom_subscriber = self.create_subscription(Odometry, '/odom', self.odom_callback, 10)

    def capture_frame(self):
        if self.is_navigating or not self.is_at_starting_point:
            return

        ret, frame = self.cap.read()
        if not ret:
            self.get_logger().error("Error: Failed to grab frame.")
            return

        cv2.imshow('frame', frame)

        text = extract_text_from_image(frame)
        if text.strip():
            self.get_logger().info(f"Detected Text: {text}")
            if "Area A" in text:
                self.navigate_to_goal()

        if cv2.waitKey(1) & 0xFF == ord('q'):
            self.get_logger().info("Releasing camera and closing all windows.")
            self.cap.release()
            cv2.destroyAllWindows()
            rclpy.shutdown()

    def navigate_to_goal(self):
        self.is_navigating = True
        self.is_at_starting_point = False 
        self.goal_reached = False  

        self.cap.release()
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            self.get_logger().error("Error: Could not re-open video device.")
            rclpy.shutdown()
            return

        goal_msg = NavigateToPose.Goal()
        
        goal_msg.pose = PoseStamped()
        goal_msg.pose.header.frame_id = "map"
        goal_msg.pose.pose.position.x = 2.272
        goal_msg.pose.pose.position.y = -1.087
        goal_msg.pose.pose.position.z = 0.010
        goal_msg.pose.pose.orientation.x = 0.0
        goal_msg.pose.pose.orientation.y = 0.0
        goal_msg.pose.pose.orientation.z = 0.601
        goal_msg.pose.pose.orientation.w = 0.799

        self.get_logger().info(f"Sending goal to navigate to point: ({goal_msg.pose.pose.position.x}, {goal_msg.pose.pose.position.y})")
        self.navigation_client.wait_for_server()
        send_goal_future = self.navigation_client.send_goal_async(goal_msg)
        send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected')
            self.is_navigating = False
            return

        self.get_logger().info('Goal accepted')
        self._get_result_future = goal_handle.get_result_async()
        self._get_result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        status = future.result().status

        if status == GoalStatus.STATUS_SUCCEEDED:
            self.get_logger().info('Navigation succeeded')
            self.last_movement_time = time.time()
        else:
            self.get_logger().info(f'Navigation failed with status: {status}')
            if status == GoalStatus.STATUS_ABORTED:
                self.get_logger().info('Navigation aborted, check for issues with the path or goal feasibility.')
            self.is_navigating = False

    def odom_callback(self, msg):
        current_position = msg.pose.pose.position
        if self.last_position is None:
            self.last_position = current_position
            self.last_movement_time = time.time()
            return

        if self.is_position_unchanged(self.last_position, current_position):
            if time.time() - self.last_movement_time > 10 and not self.is_at_starting_point:
                self.get_logger().info('Robot has not moved for 10 seconds, navigating back to starting point.')
                self.navigate_to_starting_point()
        else:
            self.last_position = current_position
            self.last_movement_time = time.time()

    def is_position_unchanged(self, pos1: Point, pos2: Point, threshold=0.05): 
        return (abs(pos1.x - pos2.x) < threshold and
                abs(pos1.y - pos2.y) < threshold and
                abs(pos1.z - pos2.z) < threshold)

    def navigate_to_starting_point(self):
        self.is_navigating = True  
        self.get_logger().info("Sending goal to navigate back to the starting point.")
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose = self.starting_point
        send_goal_future = self.navigation_client.send_goal_async(goal_msg)
        send_goal_future.add_done_callback(self.starting_point_response_callback)

    def starting_point_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Return to starting point goal rejected')
            self.is_navigating = False
            return

        self.get_logger().info('Return to starting point goal accepted')
        self._get_result_future = goal_handle.get_result_async()
        self._get_result_future.add_done_callback(self.return_result_callback)

    def return_result_callback(self, future):
        status = future.result().status

        if status == GoalStatus.STATUS_SUCCEEDED:
            self.get_logger().info('Returned to starting point successfully')
            self.goal_reached = True  
            self.is_at_starting_point = True  
            self.last_movement_time = time.time()  
        else:
            self.get_logger().info(f'Return to starting point failed with status: {status}')

        self.is_navigating = False

def main(args=None):
    rclpy.init(args=args)
    node = TextExtractorNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
